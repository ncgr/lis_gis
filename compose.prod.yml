# local or remote production deployment
# Usage:
#     1. Edit prod.env (if necessary)
#
#     2. docker compose --env-file prod.env up --build -d

services:
  nginx:
    build:
      context: .
      target: nginx
    environment:
      SCRIPT_NAME: '' # can be null (i.e., ''), but not unset for envsubst
    ports:
      - "${PORT:-80}:8080"
    depends_on:
      load:
        condition: service_completed_successfully
    restart: always
    volumes:
      - gunicorn-socket:/run/gunicorn

  django:
    build:
      context: .
      target: prod
    depends_on:
      db:
        condition: service_healthy
    restart: always
    environment:
      ALLOWED_HOSTS:
      DEBUG:
      PGHOST: /run/postgresql
      PGPORT:
      PGPASSWORD:
      PGUSER:
      PGDATABASE: postgres
      SCRIPT_NAME: ''
    network_mode: "none"
    volumes:
      - gunicorn-socket:/run/gunicorn
      - postgres-socket:/run/postgresql

  db:
    build:
      context: .
      target: db
    healthcheck:
      test: "gosu postgres pg_isready || exit 1"
    restart: always
    network_mode: "none"
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD: unused
      POSTGRES_INITDB_ARGS: --auth=peer
    volumes:
      - postgres-socket:/run/postgresql
      - /var/lib/postgresql/data
# don't listen on TCP port; write optimizations
    command: ["-c", "listen_addresses=",
              "-c", "fsync=off",
              "-c", "full_page_writes=off",
              "-c", "wal_level=minimal",
              "-c", "max_wal_senders=0",
              "-c", "synchronous_commit=off"]

  load:
    extends: django
    user: guest
    entrypoint: ["/bin/sh", "-ec", "env HOME=/tmp oras pull ghcr.io/legumeinfo/lis_gis:data-latest && /app/scripts/load-all.sh"]
    network_mode: "bridge"
    volumes:
      - /app/data

volumes:
  gunicorn-socket:
  postgres-socket:
